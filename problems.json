[
  {
    "subject": "Arrays & Hashing",
    "questions": [
      {
        "id": 1,
        "neetcode150": true,
        "blind75": true,
        "problem": "Contains Duplicate",
        "pattern": "Arrays & Hashing",
        "link": "contains-duplicate/",
        "video": "3OamzN90kPg",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0217-contains-duplicate",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "dart": true,
        "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."
      },
      {
        "id": 2,
        "neetcode150": true,
        "blind75": true,
        "problem": "Valid Anagram",
        "pattern": "Arrays & Hashing",
        "link": "valid-anagram/",
        "video": "9UtInBqnCgA",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0242-valid-anagram",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "dart": true,
        "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise."
      },
      {
        "id": 3,
        "neetcode150": true,
        "blind75": true,
        "problem": "Two Sum",
        "pattern": "Arrays & Hashing",
        "link": "two-sum/",
        "video": "KLlXCFG5TnA",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0001-two-sum",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "dart": true,
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."
      },
      {
        "id": 4,
        "neetcode150": true,
        "blind75": true,
        "problem": "Group Anagrams",
        "pattern": "Arrays & Hashing",
        "link": "group-anagrams/",
        "video": "vzdNOK2oB2E",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0049-group-anagrams",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "c": true,
        "scala": true,
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order."
      },
      {
        "id": 5,
        "neetcode150": true,
        "blind75": true,
        "problem": "Top K Frequent Elements",
        "pattern": "Arrays & Hashing",
        "link": "top-k-frequent-elements/",
        "video": "YPTqKIgVk-k",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0347-top-k-frequent-elements",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "scala": true,
        "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order."
      },
      {
        "id": 6,
        "neetcode150": true,
        "blind75": true,
        "problem": "Product of Array Except Self",
        "pattern": "Arrays & Hashing",
        "link": "product-of-array-except-self/",
        "video": "bNvIQI2wAjk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0238-product-of-array-except-self",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. You must write an algorithm that runs in O(n) time and without using the division operation."
      },
      {
        "id": 7,
        "neetcode150": true,
        "problem": "Valid Sudoku",
        "pattern": "Arrays & Hashing",
        "link": "valid-sudoku/",
        "video": "TjFXEUCMqI8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0036-valid-sudoku",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "scala": true,
        "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note: A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules."
      },
      {
        "id": 8,
        "neetcode150": true,
        "problem": "Happy Number",
        "pattern": "Arrays & Hashing",
        "link": "happy-number/",
        "video": "2g1v0x8a4fA",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0139-happy-number",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Determine if a number is happy by repeatedly summing the squares of its digits until reaching 1 or a cycle."
      },
      {
        "id": 9,
        "neetcode150": true,
        "blind75": true,
        "problem": "Encode and Decode Strings",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/659/",
        "pattern": "Arrays & Hashing",
        "link": "encode-and-decode-strings/",
        "video": "B1k_sxOSgv8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0271-encode-and-decode-strings",
        "csharp": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "rust": true,
        "typescript": true,
        "kotlin": true,
        "description": "Design an algorithm to encode and decode strings. The encoding and decoding is a process of converting a string to a different format and then back to the original string. The encoded string should be able to be decoded back to the original string."
      },
      {
        "id": 10,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Consecutive Sequence",
        "pattern": "Arrays & Hashing",
        "link": "longest-consecutive-sequence/",
        "video": "P6RZZMu_maU",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0128-longest-consecutive-sequence",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "description": "Find the length of the longest consecutive elements sequence in an unsorted array."
      }
    ]
  },
  {
    "subject": "Two Pointers",
    "questions": [
      {
        "id": 11,
        "neetcode150": true,
        "blind75": true,
        "problem": "Valid Palindrome",
        "pattern": "Two Pointers",
        "link": "valid-palindrome/",
        "video": "jJXJ16kPFWg",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0125-valid-palindrome",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "scala": true,
        "description": "Check if a given string is a palindrome considering only alphanumeric characters and ignoring cases."
      },
      {
        "id": 12,
        "neetcode150": true,
        "problem": "Two Sum II Input Array Is Sorted",
        "pattern": "Two Pointers",
        "link": "two-sum-ii-input-array-is-sorted/",
        "video": "cQ1Oz4ckceM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0167-two-sum-ii-input-array-is-sorted",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find two numbers in a sorted array that add up to a specific target."
      },
      {
        "id": 13,
        "neetcode150": true,
        "blind75": true,
        "problem": "3Sum",
        "pattern": "Two Pointers",
        "link": "3sum/",
        "video": "jzZsG8n2R9A",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0015-3sum",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "c": true,
        "description": "Find all unique triplets in the array which gives the sum of zero."
      },
      {
        "id": 14,
        "neetcode150": true,
        "blind75": true,
        "problem": "Container With Most Water",
        "pattern": "Two Pointers",
        "link": "container-with-most-water/",
        "video": "UuiTKBwPgAo",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0011-container-with-most-water",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "dart": true,
        "description": "Find two lines that together with the x-axis form a container, such that the container contains the most water."
      },
      {
        "id": 15,
        "neetcode150": true,
        "problem": "Trapping Rain Water",
        "pattern": "Two Pointers",
        "link": "trapping-rain-water/",
        "video": "ZI2z5pq0TqA",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0042-trapping-rain-water",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Calculate how much water can be trapped after raining given an elevation map."
      }
    ]
  },
  {
    "subject": "Sliding Window",
    "questions": [
      {
        "id": 16,
        "neetcode150": true,
        "blind75": true,
        "problem": "Best Time to Buy And Sell Stock",
        "pattern": "Sliding Window",
        "link": "best-time-to-buy-and-sell-stock/",
        "video": "1pkOgXD63yU",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0121-best-time-to-buy-and-sell-stock",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find the maximum profit you can achieve from buying and selling a stock."
      },
      {
        "id": 17,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Substring Without Repeating Characters",
        "pattern": "Sliding Window",
        "link": "longest-substring-without-repeating-characters/",
        "video": "wiGpQwVHdE0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0003-longest-substring-without-repeating-characters",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find the length of the longest substring without repeating characters."
      },
      {
        "id": 18,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Repeating Character Replacement",
        "pattern": "Sliding Window",
        "link": "longest-repeating-character-replacement/",
        "video": "gqXU1UyA8pk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0424-longest-repeating-character-replacement",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "rust": true,
        "swift": true,
        "description": "Find the length of the longest substring containing the same letter after replacing at most k characters."
      },
      {
        "id": 19,
        "neetcode150": true,
        "problem": "Permutation In String",
        "pattern": "Sliding Window",
        "link": "permutation-in-string/",
        "video": "UbyhOgBN834",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0567-permutation-in-string",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Check if one string is a permutation of another string."
      },
      {
        "id": 20,
        "neetcode150": true,
        "blind75": true,
        "problem": "Minimum Window Substring",
        "pattern": "Sliding Window",
        "link": "minimum-window-substring/",
        "video": "jSto0O4AJbM",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0076-minimum-window-substring",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "ruby": true,
        "swift": true,
        "description": "Find the minimum window substring that contains all characters of another string."
      },
      {
        "id": 21,
        "neetcode150": true,
        "problem": "Sliding Window Maximum",
        "pattern": "Sliding Window",
        "link": "sliding-window-maximum/",
        "video": "DfljaUwZsOk",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0239-sliding-window-maximum",
        "csharp": true,
        "go": true,
        "kotlin": true,
        "typescript": true,
        "ruby": true,
        "c": true,
        "rust": true,
        "description": "Find the maximum value in each sliding window of size k."
      }
    ]
  },
  {
    "subject": "Stack",
    "questions": [
      {
        "id": 22,
        "neetcode150": true,
        "blind75": true,
        "problem": "Valid Parentheses",
        "pattern": "Stack",
        "link": "valid-parentheses/",
        "video": "WTzjTskDFMg",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0020-valid-parentheses",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "description": "Check if a string containing parentheses is valid."
      },
      {
        "id": 23,
        "neetcode150": true,
        "problem": "Min Stack",
        "pattern": "Stack",
        "link": "min-stack/",
        "video": "qkLl7nAwDPo",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0155-min-stack",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "c": true,
        "rust": true,
        "swift": true,
        "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time."
      },
      {
        "id": 24,
        "neetcode150": true,
        "problem": "Evaluate Reverse Polish Notation",
        "pattern": "Stack",
        "link": "evaluate-reverse-polish-notation/",
        "video": "iu0082c4HDE",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0150-evaluate-reverse-polish-notation",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Evaluate the value of an arithmetic expression in Reverse Polish Notation."
      },
      {
        "id": 25,
        "neetcode150": true,
        "problem": "Generate Parentheses",
        "pattern": "Stack",
        "link": "generate-parentheses/",
        "video": "s9fokUqJ76A",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0022-generate-parentheses",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "c": true,
        "rust": true,
        "swift": true,
        "description": "Generate all combinations of well-formed parentheses."
      },
      {
        "id": 26,
        "neetcode150": true,
        "problem": "Daily Temperatures",
        "pattern": "Stack",
        "link": "daily-temperatures/",
        "video": "cTBiBSnjO3c",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0739-daily-temperatures",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the number of days until a warmer temperature for each day."
      },
      {
        "id": 27,
        "neetcode150": true,
        "problem": "Car Fleet",
        "pattern": "Stack",
        "link": "car-fleet/",
        "video": "Pr6T-3yB9RM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0853-car-fleet",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "description": "Calculate the number of car fleets that will arrive at the destination."
      },
      {
        "id": 28,
        "neetcode150": true,
        "problem": "Largest Rectangle In Histogram",
        "pattern": "Stack",
        "link": "largest-rectangle-in-histogram/",
        "video": "zx5Sw9130L0",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0084-largest-rectangle-in-histogram",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "description": "Find the largest rectangle area in a histogram."
      }
    ]
  },
  {
    "subject": "Binary Search",
    "questions": [
      {
        "id": 29,
        "neetcode150": true,
        "problem": "Binary Search",
        "pattern": "Binary Search",
        "link": "binary-search/",
        "video": "s4DPM8ct1pI",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0704-binary-search",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "description": "Implement binary search to find the target value in a sorted array."
      },
      {
        "id": 30,
        "neetcode150": true,
        "problem": "Search a 2D Matrix",
        "pattern": "Binary Search",
        "link": "search-a-2d-matrix/",
        "video": "Ber2pi2C0j0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0074-search-a-2d-matrix",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Search for a target value in a 2D matrix."
      },
      {
        "id": 31,
        "neetcode150": true,
        "problem": "Koko Eating Bananas",
        "pattern": "Binary Search",
        "link": "koko-eating-bananas/",
        "video": "U2SozAs9RzA",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0875-koko-eating-bananas",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Determine the minimum eating speed to finish all bananas within h hours."
      },
      {
        "id": 32,
        "neetcode150": true,
        "blind75": true,
        "problem": "Find Minimum In Rotated Sorted Array",
        "pattern": "Binary Search",
        "link": "find-minimum-in-rotated-sorted-array/",
        "video": "nIVW4P8b1VA",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0153-find-minimum-in-rotated-sorted-array",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "ruby": true,
        "description": "Find the minimum element in a rotated sorted array."
      },
      {
        "id": 33,
        "neetcode150": true,
        "blind75": true,
        "problem": "Search In Rotated Sorted Array",
        "pattern": "Binary Search",
        "link": "search-in-rotated-sorted-array/",
        "video": "U8XENwh8Oy8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0033-search-in-rotated-sorted-array",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Search for a target value in a rotated sorted array."
      },
      {
        "id": 34,
        "neetcode150": true,
        "problem": "Time Based Key Value Store",
        "pattern": "Binary Search",
        "link": "time-based-key-value-store/",
        "video": "fu2cD_6E8Hw",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0981-time-based-key-value-store",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "c": true,
        "description": "Design a time-based key-value store that can retrieve the value of a key at a specific timestamp."
      },
      {
        "id": 35,
        "neetcode150": true,
        "problem": "Median of Two Sorted Arrays",
        "pattern": "Binary Search",
        "link": "median-of-two-sorted-arrays/",
        "video": "q6IEA26hvXc",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0004-median-of-two-sorted-arrays",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the median of two sorted arrays."
      }
    ]
  },
  {
    "subject": "Linked List",
    "questions": [
      {
        "id": 36,
        "neetcode150": true,
        "blind75": true,
        "problem": "Reverse Linked List",
        "pattern": "Linked List",
        "link": "reverse-linked-list/",
        "video": "G0_I-ZF0S38",
        "difficulty": "Easy",
        "python": true,
        "cpp": true,
        "javascript": true,
        "java": true,
        "code": "0206-reverse-linked-list",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "rust": true,
        "dart": true,
        "description": "Reverse a singly linked list."
      },
      {
        "id": 37,
        "neetcode150": true,
        "blind75": true,
        "problem": "Merge Two Sorted Lists",
        "pattern": "Linked List",
        "link": "merge-two-sorted-lists/",
        "video": "XIdigk956u0",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0021-merge-two-sorted-lists",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "dart": true,
        "rust": true,
        "description": "Merge two sorted linked lists into one sorted list."
      },
      {
        "id": 38,
        "neetcode150": true,
        "blind75": true,
        "problem": "Reorder List",
        "pattern": "Linked List",
        "link": "reorder-list/",
        "video": "S5bfdUTrKLM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0143-reorder-list",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "description": "Reorder a linked list in a specific order."
      },
      {
        "id": 39,
        "neetcode150": true,
        "blind75": true,
        "problem": "Remove Nth Node From End of List",
        "pattern": "Linked List",
        "link": "remove-nth-node-from-end-of-list/",
        "video": "XVuQxVej6y8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0019-remove-nth-node-from-end-of-list",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Remove the nth node from the end of a linked list."
      },
      {
        "id": 40,
        "neetcode150": true,
        "problem": "Copy List With Random Pointer",
        "pattern": "Linked List",
        "link": "copy-list-with-random-pointer/",
        "video": "5Y2EiZST97Y",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0138-copy-list-with-random-pointer",
        "c": true,
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "go": true,
        "description": "Copy a linked list with random pointers."
      },
      {
        "id": 41,
        "neetcode150": true,
        "problem": "Add Two Numbers",
        "pattern": "Linked List",
        "link": "add-two-numbers/",
        "video": "wgFPrzTjm7s",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0002-add-two-numbers",
        "c": true,
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "go": true,
        "rust": true,
        "description": "Add two numbers represented as linked lists."
      },
      {
        "id": 42,
        "neetcode150": true,
        "blind75": true,
        "problem": "Linked List Cycle",
        "pattern": "Linked List",
        "link": "linked-list-cycle-detection/",
        "video": "gBTe7lFR3vc",
        "difficulty": "Easy",
        "python": true,
        "cpp": true,
        "javascript": true,
        "java": true,
        "code": "0141-linked-list-cycle",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "description": "Detect if a linked list has a cycle."
      },
      {
        "id": 43,
        "neetcode150": true,
        "problem": "Find The Duplicate Number",
        "pattern": "Linked List",
        "link": "find-the-duplicate-number/",
        "video": "wjYnzkAhcNk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0287-find-the-duplicate-number",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the duplicate number in an array."
      },
      {
        "id": 44,
        "neetcode150": true,
        "problem": "LRU Cache",
        "pattern": "Linked List",
        "link": "lru-cache/",
        "video": "7ABFKPK2hD4",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0146-lru-cache",
        "c": true,
        "csharp": true,
        "ruby": true,
        "kotlin": true,
        "go": true,
        "typescript": true,
        "swift": true,
        "description": "Design a Least Recently Used (LRU) cache."
      },
      {
        "id": 45,
        "neetcode150": true,
        "blind75": true,
        "problem": "Merge K Sorted Lists",
        "pattern": "Linked List",
        "link": "merge-k-sorted-lists/",
        "video": "q5a5OiGbT6Q",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0023-merge-k-sorted-lists",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "swift": true,
        "rust": true,
        "description": "Merge k sorted linked lists into one sorted list."
      },
      {
        "id": 46,
        "neetcode150": true,
        "problem": "Reverse Nodes In K Group",
        "pattern": "Linked List",
        "link": "reverse-nodes-in-k-group/",
        "video": "1UOPsfP85V4",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0025-reverse-nodes-in-k-group",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "swift": true,
        "rust": true,
        "description": "Reverse nodes in k-group in a linked list."
      }
    ]
  },
  {
    "subject": "Trees",
    "questions": [
      {
        "id": 47,
        "neetcode150": true,
        "blind75": true,
        "problem": "Invert Binary Tree",
        "pattern": "Trees",
        "link": "invert-binary-tree/",
        "video": "OnSn2XEQ4MY",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0226-invert-binary-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Invert a binary tree."
      },
      {
        "id": 48,
        "neetcode150": true,
        "blind75": true,
        "problem": "Maximum Depth of Binary Tree",
        "pattern": "Trees",
        "link": "maximum-depth-of-binary-tree/",
        "video": "hTM3phVI6YQ",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0104-maximum-depth-of-binary-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the maximum depth of a binary tree."
      },
      {
        "id": 49,
        "neetcode150": true,
        "problem": "Diameter of Binary Tree",
        "pattern": "Trees",
        "link": "diameter-of-binary-tree/",
        "video": "bkxqA8Rfv04",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0543-diameter-of-binary-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the diameter of a binary tree."
      },
      {
        "id": 50,
        "neetcode150": true,
        "problem": "Balanced Binary Tree",
        "pattern": "Trees",
        "link": "balanced-binary-tree/",
        "video": "QfJsau0ItOY",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0110-balanced-binary-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Check if a binary tree is height-balanced."
      },
      {
        "id": 51,
        "neetcode150": true,
        "blind75": true,
        "problem": "Same Tree",
        "pattern": "Trees",
        "link": "same-tree/",
        "video": "vRbbcKXCxOw",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0100-same-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Check if two binary trees are the same."
      },
      {
        "id": 52,
        "neetcode150": true,
        "blind75": true,
        "problem": "Subtree of Another Tree",
        "pattern": "Trees",
        "link": "subtree-of-another-tree/",
        "video": "E36O5SWp-LE",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0572-subtree-of-another-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "rust": true,
        "description": "Check if one tree is a subtree of another tree."
      },
      {
        "id": 53,
        "neetcode150": true,
        "blind75": true,
        "problem": "Lowest Common Ancestor of a Binary Search Tree",
        "pattern": "Trees",
        "link": "lowest-common-ancestor-of-a-binary-search-tree/",
        "video": "gs2LMfuOR9k",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0235-lowest-common-ancestor-of-a-binary-search-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "rust": true,
        "description": "Find the lowest common ancestor of two nodes in a binary search tree."
      },
      {
        "id": 54,
        "neetcode150": true,
        "blind75": true,
        "problem": "Binary Tree Level Order Traversal",
        "pattern": "Trees",
        "link": "binary-tree-level-order-traversal/",
        "video": "6ZnyEApgFYg",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0102-binary-tree-level-order-traversal",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Perform level order traversal of a binary tree."
      },
      {
        "id": 55,
        "neetcode150": true,
        "problem": "Binary Tree Right Side View",
        "pattern": "Trees",
        "link": "binary-tree-right-side-view/",
        "video": "d4zLyf32e3I",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0199-binary-tree-right-side-view",
        "c": true,
        "csharp": true,
        "typescript": true,
        "swift": true,
        "kotlin": true,
        "go": true,
        "rust": true,
        "description": "Find the right side view of a binary tree."
      },
      {
        "id": 56,
        "neetcode150": true,
        "problem": "Count Good Nodes In Binary Tree",
        "pattern": "Trees",
        "link": "count-good-nodes-in-binary-tree/",
        "video": "7cp5imvDzl4",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "1448-count-good-nodes-in-binary-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Count the number of good nodes in a binary tree."
      },
      {
        "id": 57,
        "neetcode150": true,
        "blind75": true,
        "problem": "Validate Binary Search Tree",
        "pattern": "Trees",
        "link": "validate-binary-search-tree/",
        "video": "s6ATEkipzow",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0098-validate-binary-search-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Validate if a binary tree is a binary search tree."
      },
      {
        "id": 58,
        "neetcode150": true,
        "blind75": true,
        "problem": "Kth Smallest Element In a Bst",
        "pattern": "Trees",
        "link": "kth-smallest-element-in-a-bst/",
        "video": "5LUXSvjmGCw",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0230-kth-smallest-element-in-a-bst",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "rust": true,
        "description": "Find the kth smallest element in a binary search tree."
      },
      {
        "id": 59,
        "neetcode150": true,
        "blind75": true,
        "problem": "Construct Binary Tree From Preorder And Inorder Traversal",
        "pattern": "Trees",
        "link": "construct-binary-tree-from-preorder-and-inorder-traversal/",
        "video": "ihj4IQGZ2zc",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0105-construct-binary-tree-from-preorder-and-inorder-traversal",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "description": "Construct a binary tree from preorder and inorder traversal."
      },
      {
        "id": 60,
        "neetcode150": true,
        "blind75": true,
        "problem": "Binary Tree Maximum Path Sum",
        "pattern": "Trees",
        "link": "binary-tree-maximum-path-sum/",
        "video": "Hr5cWUld4vU",
        "difficulty": "Hard",
        "code": "0124-binary-tree-maximum-path-sum",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the maximum path sum in a binary tree."
      },
      {
        "id": 61,
        "neetcode150": true,
        "blind75": true,
        "problem": "Serialize And Deserialize Binary Tree",
        "pattern": "Trees",
        "link": "serialize-and-deserialize-binary-tree/",
        "video": "u4JAi2JJhI8",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0297-serialize-and-deserialize-binary-tree",
        "c": true,
        "csharp": true,
        "kotlin": true,
        "go": true,
        "typescript": true,
        "swift": true,
        "description": "Serialize and deserialize a binary tree."
      }
    ]
  },
  {
    "subject": "Tries",
    "questions": [
      {
        "id": 62,
        "neetcode150": true,
        "blind75": true,
        "problem": "Implement Trie Prefix Tree",
        "pattern": "Tries",
        "link": "implement-trie-prefix-tree/",
        "video": "oobqoCJlHA0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0208-implement-trie-prefix-tree",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Implement a trie with insert, search, and startsWith methods."
      },
      {
        "id": 63,
        "neetcode150": true,
        "blind75": true,
        "problem": "Design Add And Search Words Data Structure",
        "pattern": "Tries",
        "link": "design-add-and-search-words-data-structure/",
        "video": "BTf05gs_8iU",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0211-design-add-and-search-words-data-structure",
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "kotlin": true,
        "rust": true,
        "go": true,
        "c": true,
        "scala": true,
        "description": "Design a data structure that supports adding and searching words with wildcards."
      },
      {
        "id": 64,
        "neetcode150": true,
        "blind75": true,
        "problem": "Word Search II",
        "pattern": "Tries",
        "link": "word-search-ii/",
        "video": "asbcE9mZz_U",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0212-word-search-ii",
        "csharp": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "go": true,
        "c": true,
        "description": "Find all words in a board using a trie."
      }
    ]
  },
  {
    "subject": "Heap / Priority Queue",
    "questions": [
      {
        "id": 65,
        "neetcode150": true,
        "problem": "Kth Largest Element In a Stream",
        "pattern": "Heap / Priority Queue",
        "link": "kth-largest-element-in-a-stream/",
        "video": "hOjcdrqMoQ8",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0703-kth-largest-element-in-a-stream",
        "c": true,
        "csharp": true,
        "ruby": true,
        "swift": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the kth largest element in a stream."
      },
      {
        "id": 66,
        "neetcode150": true,
        "problem": "Last Stone Weight",
        "pattern": "Heap / Priority Queue",
        "link": "last-stone-weight/",
        "video": "B-QCq79-Vfw",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "1046-last-stone-weight",
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "kotlin": true,
        "go": true,
        "rust": true,
        "c": true,
        "description": "Find the weight of the last stone after smashing stones."
      },
      {
        "id": 67,
        "neetcode150": true,
        "problem": "K Closest Points to Origin",
        "pattern": "Heap / Priority Queue",
        "link": "k-closest-points-to-origin/",
        "video": "rI2EBUEMfTk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0973-k-closest-points-to-origin",
        "csharp": true,
        "kotlin": true,
        "go": true,
        "rust": true,
        "c": true,
        "description": "Find the k closest points to the origin."
      },
      {
        "id": 68,
        "neetcode150": true,
        "problem": "Kth Largest Element In An Array",
        "pattern": "Heap / Priority Queue",
        "link": "kth-largest-element-in-an-array/",
        "video": "XEmy13g1Qxc",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0215-kth-largest-element-in-an-array",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "scala": true,
        "c": true,
        "rust": true,
        "description": "Find the kth largest element in an array."
      },
      {
        "id": 69,
        "neetcode150": true,
        "problem": "Task Scheduler",
        "pattern": "Heap / Priority Queue",
        "link": "task-scheduler/",
        "video": "s8p8ukTyA2I",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0621-task-scheduler",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "description": "Schedule tasks with a cooldown period."
      },
      {
        "id": 70,
        "neetcode150": true,
        "problem": "Design Twitter",
        "pattern": "Heap / Priority Queue",
        "link": "design-twitter/",
        "video": "pNichitDD2E",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0355-design-twitter",
        "csharp": true,
        "go": true,
        "kotlin": true,
        "description": "Design a Twitter-like system with user timelines."
      },
      {
        "id": 71,
        "neetcode150": true,
        "blind75": true,
        "problem": "Find Median From Data Stream",
        "pattern": "Heap / Priority Queue",
        "link": "find-median-from-data-stream/",
        "video": "itmhHWaHupI",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0295-find-median-from-data-stream",
        "csharp": true,
        "kotlin": true,
        "go": true,
        "typescript": true,
        "description": "Find the median of a data stream."
      }
    ]
  },
  {
    "subject": "Backtracking",
    "questions": [
      {
        "id": 72,
        "neetcode150": true,
        "problem": "Subsets",
        "pattern": "Backtracking",
        "link": "subsets/",
        "video": "REOH22Xwdkk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0078-subsets",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find all subsets of a given set."
      },
      {
        "id": 73,
        "neetcode150": true,
        "blind75": true,
        "problem": "Combination Sum",
        "pattern": "Backtracking",
        "link": "combination-sum/",
        "video": "GBKI9VSKdGg",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0039-combination-sum",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "c": true,
        "swift": true,
        "description": "Find all unique combinations of numbers that sum to a target."
      },
      {
        "id": 74,
        "neetcode150": true,
        "problem": "Permutations",
        "pattern": "Backtracking",
        "link": "permutations/",
        "video": "s7AvT7cGdSo",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0046-permutations",
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "c": true,
        "description": "Find all permutations of a given set."
      },
      {
        "id": 75,
        "neetcode150": true,
        "problem": "Subsets II",
        "pattern": "Backtracking",
        "link": "subsets-ii/",
        "video": "Vn2v6ajA7U0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0090-subsets-ii",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "c": true,
        "description": "Find all subsets of a given set, including duplicates."
      },
      {
        "id": 76,
        "neetcode150": true,
        "problem": "Combination Sum II",
        "pattern": "Backtracking",
        "link": "combination-sum-ii/",
        "video": "rSA3t6BDDwg",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0040-combination-sum-ii",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "ruby": true,
        "c": true,
        "description": "Find all unique combinations of numbers that sum to a target, including duplicates."
      },
      {
        "id": 77,
        "neetcode150": true,
        "blind75": true,
        "problem": "Word Search",
        "pattern": "Backtracking",
        "link": "word-search/",
        "video": "pfiQ_PS1g8E",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0079-word-search",
        "c": true,
        "csharp": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "ruby": true,
        "description": "Find a word in a 2D board using backtracking."
      },
      {
        "id": 78,
        "neetcode150": true,
        "problem": "Palindrome Partitioning",
        "pattern": "Backtracking",
        "link": "palindrome-partitioning/",
        "video": "3jvWodd7ht0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0131-palindrome-partitioning",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "rust": true,
        "swift": true,
        "kotlin": true,
        "description": "Partition a string into all possible palindrome substrings."
      },
      {
        "id": 79,
        "neetcode150": true,
        "problem": "Letter Combinations of a Phone Number",
        "pattern": "Backtracking",
        "link": "letter-combinations-of-a-phone-number/",
        "video": "0snEunUacZY",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0017-letter-combinations-of-a-phone-number",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "rust": true,
        "kotlin": true,
        "swift": true,
        "description": "Find all letter combinations that a phone number can represent."
      },
      {
        "id": 80,
        "neetcode150": true,
        "problem": "N Queens",
        "pattern": "Backtracking",
        "link": "n-queens/",
        "video": "Ph95IHmRp5M",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0051-n-queens",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "c": true,
        "rust": true,
        "description": "Solve the N-Queens problem using backtracking."
      }
    ]
  },
  {
    "subject": "Graphs",
    "questions": [
      {
        "id": 81,
        "neetcode150": true,
        "blind75": true,
        "problem": "Number of Islands",
        "pattern": "Graphs",
        "link": "number-of-islands/",
        "video": "pV2kpPD66nE",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0200-number-of-islands",
        "c": true,
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "go": true,
        "rust": true,
        "description": "Count the number of islands in a 2D grid."
      },
      {
        "id": 82,
        "neetcode150": true,
        "blind75": true,
        "problem": "Clone Graph",
        "pattern": "Graphs",
        "link": "clone-graph/",
        "video": "mQeF6bN8hMk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0133-clone-graph",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "description": "Clone a graph."
      },
      {
        "id": 83,
        "neetcode150": true,
        "problem": "Max Area of Island",
        "pattern": "Graphs",
        "link": "max-area-of-island/",
        "video": "iJGr1OtmH0c",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0695-max-area-of-island",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the maximum area of an island in a 2D grid."
      },
      {
        "id": 84,
        "neetcode150": true,
        "blind75": true,
        "problem": "Pacific Atlantic Water Flow",
        "pattern": "Graphs",
        "link": "pacific-atlantic-water-flow/",
        "video": "s-VkcjHqkGI",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0417-pacific-atlantic-water-flow",
        "c": true,
        "csharp": true,
        "kotlin": true,
        "typescript": true,
        "go": true,
        "rust": true,
        "description": "Find cells in a matrix that can flow to both Pacific and Atlantic oceans."
      },
      {
        "id": 85,
        "neetcode150": true,
        "problem": "Surrounded Regions",
        "pattern": "Graphs",
        "link": "surrounded-regions/",
        "video": "9z2BunfoZ5Y",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0130-surrounded-regions",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "description": "Capture surrounded regions in a 2D grid."
      },
      {
        "id": 86,
        "neetcode150": true,
        "problem": "Rotting Oranges",
        "pattern": "Graphs",
        "link": "rotting-oranges/",
        "video": "y704fEOx0s0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0994-rotting-oranges",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "description": "Find the minimum time to rot all oranges in a grid."
      },
      {
        "id": 87,
        "neetcode150": true,
        "problem": "Walls And Gates",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/663/",
        "pattern": "Graphs",
        "link": "walls-and-gates/",
        "video": "e69C6xhiSQE",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0286-walls-and-gates",
        "csharp": true,
        "description": "Fill each empty room with the distance to its nearest gate."
      },
      {
        "id": 88,
        "neetcode150": true,
        "blind75": true,
        "problem": "Course Schedule",
        "pattern": "Graphs",
        "link": "course-schedule/",
        "video": "EgI5nU9etnU",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0207-course-schedule",
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "c": true,
        "description": "Determine if you can finish all courses given prerequisites."
      },
      {
        "id": 89,
        "neetcode150": true,
        "problem": "Course Schedule II",
        "pattern": "Graphs",
        "link": "course-schedule-ii/",
        "video": "Akt3glAwyfY",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0210-course-schedule-ii",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "description": "Find the order of courses to finish all given prerequisites."
      },
      {
        "id": 90,
        "neetcode150": true,
        "problem": "Redundant Connection",
        "pattern": "Graphs",
        "link": "redundant-connection/",
        "video": "FXWRE67PLL0",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0684-redundant-connection",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the redundant connection in a graph."
      },
      {
        "id": 91,
        "neetcode150": true,
        "blind75": true,
        "problem": "Number of Connected Components In An Undirected Graph",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/3651/",
        "pattern": "Graphs",
        "link": "number-of-connected-components-in-an-undirected-graph/",
        "video": "8f1XPm4WOUc",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0323-number-of-connected-components-in-an-undirected-graph",
        "csharp": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "description": "Count the number of connected components in an undirected graph."
      },
      {
        "id": 92,
        "neetcode150": true,
        "blind75": true,
        "problem": "Graph Valid Tree",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/178/",
        "pattern": "Graphs",
        "link": "graph-valid-tree/",
        "video": "bXsUuownnoQ",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0261-graph-valid-tree",
        "csharp": true,
        "typescript": true,
        "swift": true,
        "description": "Determine if a graph is a valid tree."
      },
      {
        "id": 93,
        "neetcode150": true,
        "problem": "Word Ladder",
        "pattern": "Graphs",
        "link": "word-ladder/",
        "video": "h9iTnkgv05E",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0127-word-ladder",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "rust": true,
        "description": "Find the shortest transformation sequence from start to end word."
      }
    ]
  },
  {
    "subject": "Advanced Graphs",
    "questions": [
      {
        "id": 94,
        "neetcode150": true,
        "problem": "Reconstruct Itinerary",
        "pattern": "Advanced Graphs",
        "link": "reconstruct-itinerary/",
        "video": "ZyB_gQ8vqGA",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0332-reconstruct-itinerary",
        "csharp": true,
        "kotlin": true,
        "go": true,
        "c": true,
        "rust": true,
        "description": "Reconstruct the itinerary from a list of tickets."
      },
      {
        "id": 95,
        "neetcode150": true,
        "problem": "Min Cost to Connect All Points",
        "pattern": "Advanced Graphs",
        "link": "min-cost-to-connect-all-points/",
        "video": "f7JOBJIC-NA",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "1584-min-cost-to-connect-all-points",
        "csharp": true,
        "ruby": true,
        "swift": true,
        "go": true,
        "kotlin": true,
        "description": "Find the minimum cost to connect all points in a graph."
      },
      {
        "id": 96,
        "neetcode150": true,
        "problem": "Network Delay Time",
        "pattern": "Advanced Graphs",
        "link": "network-delay-time/",
        "video": "EaphyqKU4PQ",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0743-network-delay-time",
        "csharp": true,
        "go": true,
        "kotlin": true,
        "description": "Find the time it takes for all nodes to receive a signal."
      },
      {
        "id": 97,
        "neetcode150": true,
        "problem": "Swim In Rising Water",
        "pattern": "Advanced Graphs",
        "link": "swim-in-rising-water/",
        "video": "amvrKlMLuGY",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0778-swim-in-rising-water",
        "csharp": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the minimum time to swim from top-left to bottom-right in a grid."
      },
      {
        "id": 98,
        "neetcode150": true,
        "blind75": true,
        "problem": "Alien Dictionary",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/892/",
        "pattern": "Advanced Graphs",
        "link": "alien-dictionary/",
        "video": "6kTZYvNNyps",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0269-alien-dictionary",
        "csharp": true,
        "description": "Find the order of characters in an alien language."
      },
      {
        "id": 99,
        "neetcode150": true,
        "problem": "Cheapest Flights Within K Stops",
        "pattern": "Advanced Graphs",
        "link": "cheapest-flights-within-k-stops/",
        "video": "5eIK3zUdYmE",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0787-cheapest-flights-within-k-stops",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "description": "Find the cheapest flight within k stops."
      }
    ]
  },
  {
    "subject": "1-D Dynamic Programming",
    "questions": [
      {
        "id": 100,
        "neetcode150": true,
        "blind75": true,
        "problem": "Climbing Stairs",
        "pattern": "1-D Dynamic Programming",
        "link": "climbing-stairs/",
        "video": "Y0lT9Fck7qI",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0070-climbing-stairs",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "description": "Find the number of ways to climb a staircase with n steps."
      },
      {
        "id": 101,
        "neetcode150": true,
        "problem": "Min Cost Climbing Stairs",
        "pattern": "1-D Dynamic Programming",
        "link": "min-cost-climbing-stairs/",
        "code": "0746-min-cost-climbing-stairs",
        "video": "ktmzAZWkEZ0",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find the minimum cost to climb a staircase."
      },
      {
        "id": 102,
        "neetcode150": true,
        "blind75": true,
        "problem": "House Robber",
        "pattern": "1-D Dynamic Programming",
        "link": "house-robber/",
        "video": "73r3KWiEvyk",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0198-house-robber",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find the maximum amount of money you can rob without alerting the police."
      },
      {
        "id": 103,
        "neetcode150": true,
        "blind75": true,
        "problem": "House Robber II",
        "pattern": "1-D Dynamic Programming",
        "link": "house-robber-ii/",
        "video": "rWAJCfYYOvM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0213-house-robber-ii",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "scala": true,
        "description": "Find the maximum amount of money you can rob in a circular neighborhood."
      },
      {
        "id": 104,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Palindromic Substring",
        "pattern": "1-D Dynamic Programming",
        "link": "longest-palindromic-substring/",
        "video": "XYQecbcd6_c",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0005-longest-palindromic-substring",
        "c": true,
        "csharp": true,
        "typescript": true,
        "rust": true,
        "go": true,
        "kotlin": true,
        "description": "Find the longest palindromic substring in a given string."
      },
      {
        "id": 105,
        "neetcode150": true,
        "blind75": true,
        "problem": "Palindromic Substrings",
        "pattern": "1-D Dynamic Programming",
        "link": "palindromic-substrings/",
        "video": "4RACzI5-du8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0647-palindromic-substrings",
        "c": true,
        "csharp": true,
        "typescript": true,
        "rust": true,
        "go": true,
        "kotlin": true,
        "description": "Count the number of palindromic substrings in a given string."
      },
      {
        "id": 106,
        "neetcode150": true,
        "blind75": true,
        "problem": "Decode Ways",
        "pattern": "1-D Dynamic Programming",
        "link": "decode-ways/",
        "video": "6aEyTjOwlJU",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0091-decode-ways",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "scala": true,
        "go": true,
        "description": "Count the number of ways to decode a string of digits."
      },
      {
        "id": 107,
        "neetcode150": true,
        "blind75": true,
        "problem": "Coin Change",
        "pattern": "1-D Dynamic Programming",
        "link": "coin-change/",
        "video": "H9bfqozjoqs",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0322-coin-change",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "rust": true,
        "go": true,
        "scala": true,
        "description": "Find the minimum number of coins needed to make a given amount."
      },
      {
        "id": 108,
        "neetcode150": true,
        "blind75": true,
        "problem": "Maximum Product Subarray",
        "pattern": "1-D Dynamic Programming",
        "link": "maximum-product-subarray/",
        "video": "lXVy6YWFcRM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0152-maximum-product-subarray",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the maximum product of a contiguous subarray."
      },
      {
        "id": 109,
        "neetcode150": true,
        "blind75": true,
        "problem": "Word Break",
        "pattern": "1-D Dynamic Programming",
        "link": "word-break/",
        "video": "Sx9NNgInc3A",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0139-word-break",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "description": "Determine if a string can be segmented into words from a dictionary."
      },
      {
        "id": 110,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Increasing Subsequence",
        "pattern": "1-D Dynamic Programming",
        "link": "longest-increasing-subsequence/",
        "video": "cjWnW0hdF1Y",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0300-longest-increasing-subsequence",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the length of the longest increasing subsequence in an array."
      },
      {
        "id": 111,
        "neetcode150": true,
        "problem": "Partition Equal Subset Sum",
        "pattern": "1-D Dynamic Programming",
        "link": "partition-equal-subset-sum/",
        "video": "IsvocB5BJhw",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0416-partition-equal-subset-sum",
        "csharp": true,
        "go": true,
        "kotlin": true,
        "c": true,
        "description": "Determine if an array can be partitioned into two subsets with equal sum."
      }
    ]
  },
  {
    "subject": "2-D Dynamic Programming",
    "questions": [
      {
        "id": 112,
        "neetcode150": true,
        "blind75": true,
        "problem": "Unique Paths",
        "pattern": "2-D Dynamic Programming",
        "link": "unique-paths/",
        "video": "IlEsdxuD4lY",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0062-unique-paths",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the number of unique paths in a grid."
      },
      {
        "id": 113,
        "neetcode150": true,
        "blind75": true,
        "problem": "Longest Common Subsequence",
        "pattern": "2-D Dynamic Programming",
        "link": "longest-common-subsequence/",
        "video": "Ua0GhsJSlWM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "1143-longest-common-subsequence",
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "c": true,
        "description": "Find the longest common subsequence between two strings."
      },
      {
        "id": 114,
        "neetcode150": true,
        "problem": "Best Time to Buy And Sell Stock With Cooldown",
        "pattern": "2-D Dynamic Programming",
        "link": "best-time-to-buy-and-sell-stock-with-cooldown/",
        "video": "I7j0F7AHpb8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0309-best-time-to-buy-and-sell-stock-with-cooldown",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the maximum profit with a cooldown period between transactions."
      },
      {
        "id": 115,
        "neetcode150": true,
        "problem": "Coin Change II",
        "pattern": "2-D Dynamic Programming",
        "link": "coin-change-ii/",
        "video": "Mjy4hd2xgrs",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0518-coin-change-ii",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the number of ways to make a given amount using coins."
      },
      {
        "id": 116,
        "neetcode150": true,
        "problem": "Target Sum",
        "pattern": "2-D Dynamic Programming",
        "link": "target-sum/",
        "video": "g0npyaQtAQM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0494-target-sum",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "c": true,
        "description": "Find the number of ways to assign symbols to make the sum equal to target."
      },
      {
        "id": 117,
        "neetcode150": true,
        "problem": "Interleaving String",
        "pattern": "2-D Dynamic Programming",
        "link": "interleaving-string/",
        "video": "3Rw3p9LrgvE",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0097-interleaving-string",
        "csharp": true,
        "typescript": true,
        "go": true,
        "scala": true,
        "kotlin": true,
        "c": true,
        "description": "Check if a string is an interleaving of two other strings."
      },
      {
        "id": 118,
        "neetcode150": true,
        "problem": "Longest Increasing Path In a Matrix",
        "pattern": "2-D Dynamic Programming",
        "link": "longest-increasing-path-in-a-matrix/",
        "video": "wCc_nd-GiEc",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0329-longest-increasing-path-in-a-matrix",
        "c": true,
        "csharp": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the longest increasing path in a matrix."
      },
      {
        "id": 119,
        "neetcode150": true,
        "problem": "Distinct Subsequences",
        "pattern": "2-D Dynamic Programming",
        "link": "distinct-subsequences/",
        "video": "-RDzMJ33nx8",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0115-distinct-subsequences",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "c": true,
        "description": "Count the number of distinct subsequences of one string in another."
      },
      {
        "id": 120,
        "neetcode150": true,
        "problem": "Edit Distance",
        "pattern": "2-D Dynamic Programming",
        "link": "edit-distance/",
        "video": "XYi2-LPrwm4",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0072-edit-distance",
        "csharp": true,
        "swift": true,
        "scala": true,
        "kotlin": true,
        "c": true,
        "description": "Find the minimum edit distance between two strings."
      },
      {
        "id": 121,
        "neetcode150": true,
        "problem": "Burst Balloons",
        "pattern": "2-D Dynamic Programming",
        "link": "burst-balloons/",
        "video": "VFskby7lUbw",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0312-burst-balloons",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "c": true,
        "description": "Find the maximum coins you can collect by bursting balloons."
      },
      {
        "id": 122,
        "neetcode150": true,
        "problem": "Regular Expression Matching",
        "pattern": "2-D Dynamic Programming",
        "link": "regular-expression-matching/",
        "video": "HAA8mgxlov8",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0010-regular-expression-matching",
        "csharp": true,
        "typescript": true,
        "go": true,
        "c": true,
        "kotlin": true,
        "description": "Implement regular expression matching with support for '.' and '*'."
      }
    ]
  },
  {
    "subject": "Greedy",
    "questions": [
      {
        "id": 123,
        "neetcode150": true,
        "blind75": true,
        "problem": "Maximum Subarray",
        "pattern": "Greedy",
        "link": "maximum-subarray/",
        "video": "5WZl3MMT0Eg",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0053-maximum-subarray",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "ruby": true,
        "description": "Find the maximum sum of a contiguous subarray."
      },
      {
        "id": 124,
        "neetcode150": true,
        "blind75": true,
        "problem": "Jump Game",
        "pattern": "Greedy",
        "link": "jump-game/",
        "video": "Yan0cv2cLy8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0055-jump-game",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Determine if you can reach the last index in an array."
      },
      {
        "id": 125,
        "neetcode150": true,
        "problem": "Jump Game II",
        "pattern": "Greedy",
        "link": "jump-game-ii/",
        "video": "dJ7sWiOoK7g",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0045-jump-game-ii",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "ruby": true,
        "description": "Find the minimum number of jumps to reach the last index in an array."
      },
      {
        "id": 126,
        "neetcode150": true,
        "problem": "Gas Station",
        "pattern": "Greedy",
        "link": "gas-station/",
        "video": "lJwbPZGo05A",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0134-gas-station",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "ruby": true,
        "description": "Determine if you can complete a circuit given gas and cost arrays."
      },
      {
        "id": 127,
        "neetcode150": true,
        "problem": "Hand of Straights",
        "pattern": "Greedy",
        "link": "hand-of-straights/",
        "video": "amnrMCVd2YI",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0846-hand-of-straights",
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "c": true,
        "description": "Determine if you can rearrange cards into groups of consecutive cards."
      },
      {
        "id": 128,
        "neetcode150": true,
        "problem": "Merge Triplets to Form Target Triplet",
        "pattern": "Greedy",
        "link": "merge-triplets-to-form-target-triplet/",
        "video": "kShkQLQZ9K4",
        "difficulty": "Medium",
        "code": "1899-merge-triplets-to-form-target-triplet",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "csharp": true,
        "typescript": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "c": true,
        "description": "Determine if you can merge triplets to form the target triplet."
      },
      {
        "id": 129,
        "neetcode150": true,
        "problem": "Partition Labels",
        "pattern": "Greedy",
        "link": "partition-labels/",
        "video": "B7m8UmZE-vw",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0763-partition-labels",
        "csharp": true,
        "go": true,
        "ruby": true,
        "kotlin": true,
        "c": true,
        "description": "Partition a string into as many parts as possible such that each letter appears in at most one part."
      },
      {
        "id": 130,
        "neetcode150": true,
        "problem": "Valid Parenthesis String",
        "pattern": "Greedy",
        "link": "valid-parenthesis-string/",
        "video": "QhPdNS143Qg",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0678-valid-parenthesis-string",
        "c": true,
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "description": "Check if a string containing parentheses and stars is valid."
      }
    ]
  },
  {
    "subject": "Intervals",
    "questions": [
      {
        "id": 131,
        "neetcode150": true,
        "blind75": true,
        "problem": "Insert Interval",
        "pattern": "Intervals",
        "link": "insert-interval/",
        "video": "A8NUOmlwOlM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0057-insert-interval",
        "csharp": true,
        "typescript": true,
        "swift": true,
        "rust": true,
        "go": true,
        "kotlin": true,
        "c": true,
        "description": "Insert a new interval into a list of intervals."
      },
      {
        "id": 132,
        "neetcode150": true,
        "blind75": true,
        "problem": "Merge Intervals",
        "pattern": "Intervals",
        "link": "merge-intervals/",
        "video": "44H3cEC2fFM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0056-merge-intervals",
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "scala": true,
        "c": true,
        "rust": true,
        "description": "Merge overlapping intervals in a list."
      },
      {
        "id": 133,
        "neetcode150": true,
        "blind75": true,
        "problem": "Non Overlapping Intervals",
        "pattern": "Intervals",
        "link": "non-overlapping-intervals/",
        "video": "nONCGxWoUfM",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0435-non-overlapping-intervals",
        "csharp": true,
        "typescript": true,
        "go": true,
        "scala": true,
        "c": true,
        "kotlin": true,
        "description": "Find the minimum number of intervals to remove to make the rest non-overlapping."
      },
      {
        "id": 134,
        "neetcode150": true,
        "blind75": true,
        "problem": "Meeting Rooms",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/920/",
        "pattern": "Intervals",
        "link": "meeting-rooms/",
        "video": "PaJxqZVPhbg",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0252-meeting-rooms",
        "csharp": true,
        "rust": true,
        "kotlin": true,
        "description": "Determine if a person can attend all meetings given their intervals."
      },
      {
        "id": 135,
        "neetcode150": true,
        "blind75": true,
        "problem": "Meeting Rooms II",
        "premium": true,
        "freeLink": "https://www.lintcode.com/problem/919/",
        "pattern": "Intervals",
        "link": "meeting-rooms-ii/",
        "video": "FdzJmTCVyJU",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0253-meeting-rooms-ii",
        "csharp": true,
        "rust": true,
        "kotlin": true,
        "description": "Find the minimum number of meeting rooms required."
      },
      {
        "id": 136,
        "neetcode150": true,
        "problem": "Minimum Interval to Include Each Query",
        "pattern": "Intervals",
        "link": "minimum-interval-to-include-each-query/",
        "video": "5hQ5WWW5awQ",
        "difficulty": "Hard",
        "python": true,
        "java": true,
        "cpp": true,
        "code": "1851-minimum-interval-to-include-each-query",
        "csharp": true,
        "javascript": true,
        "kotlin": true,
        "description": "Find the minimum interval to include each query."
      }
    ]
  },
  {
    "subject": "Math & Geometry",
    "questions": [
      {
        "id": 137,
        "neetcode150": true,
        "blind75": true,
        "problem": "Rotate Image",
        "pattern": "Math & Geometry",
        "link": "rotate-image/",
        "video": "fMSJSS7eO1w",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0048-rotate-image",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "ruby": true,
        "kotlin": true,
        "rust": true,
        "description": "Rotate a 2D matrix 90 degrees clockwise."
      },
      {
        "id": 138,
        "neetcode150": true,
        "blind75": true,
        "problem": "Spiral Matrix",
        "pattern": "Math & Geometry",
        "link": "spiral-matrix/",
        "video": "BJnMZNwUk1M",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0054-spiral-matrix",
        "csharp": true,
        "typescript": true,
        "kotlin": true,
        "go": true,
        "ruby": true,
        "c": true,
        "description": "Return all elements of a matrix in spiral order."
      },
      {
        "id": 139,
        "neetcode150": true,
        "blind75": true,
        "problem": "Set Matrix Zeroes",
        "pattern": "Math & Geometry",
        "link": "set-matrix-zeroes/",
        "video": "T41rL0L3Pnw",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0073-set-matrix-zeroes",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "kotlin": true,
        "ruby": true,
        "description": "Set matrix elements to zero if any element in their row or column is zero."
      },
      {
        "id": 140,
        "neetcode150": true,
        "problem": "Happy Number",
        "pattern": "Math & Geometry",
        "link": "happy-number/",
        "video": "ljz85bxOYJ0",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0202-happy-number",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "description": "Determine if a number is happy by repeatedly summing the squares of its digits until reaching 1 or a cycle."
      },
      {
        "id": 141,
        "neetcode150": true,
        "problem": "Plus One",
        "pattern": "Math & Geometry",
        "link": "plus-one/",
        "video": "jIaA8boiG1s",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0066-plus-one",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "swift": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "description": "Add one to a number represented as an array of digits."
      },
      {
        "id": 142,
        "neetcode150": true,
        "problem": "Pow(x, n)",
        "pattern": "Math & Geometry",
        "link": "powx-n/",
        "video": "g9YQyYi4IQQ",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "javascript": true,
        "cpp": true,
        "code": "0050-powx-n",
        "c": true,
        "csharp": true,
        "typescript": true,
        "swift": true,
        "ruby": true,
        "kotlin": true,
        "description": "Implement pow(x, n) using recursion."
      },
      {
        "id": 143,
        "neetcode150": true,
        "problem": "Multiply Strings",
        "pattern": "Math & Geometry",
        "link": "multiply-strings/",
        "video": "1vZswirL8Y8",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0043-multiply-strings",
        "csharp": true,
        "typescript": true,
        "swift": true,
        "ruby": true,
        "kotlin": true,
        "c": true,
        "description": "Multiply two numbers represented as strings."
      },
      {
        "id": 144,
        "neetcode150": true,
        "problem": "Detect Squares",
        "pattern": "Math & Geometry",
        "link": "detect-squares/",
        "video": "bahebearrDc",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "2013-detect-squares",
        "csharp": true,
        "kotlin": true,
        "ruby": true,
        "rust": true,
        "description": "Detect squares in a 2D plane."
      }
    ]
  },
  {
    "subject": "Bit Manipulation",
    "questions": [
      {
        "id": 145,
        "neetcode150": true,
        "problem": "Single Number",
        "pattern": "Bit Manipulation",
        "link": "single-number/",
        "video": "qMPX1AOa83k",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0136-single-number",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "dart": true,
        "description": "Find the single number in an array using XOR."
      },
      {
        "id": 146,
        "neetcode150": true,
        "blind75": true,
        "problem": "Number of 1 Bits",
        "pattern": "Bit Manipulation",
        "link": "number-of-1-bits/",
        "video": "5Km3utixwZs",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0191-number-of-1-bits",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Count the number of 1 bits in an integer."
      },
      {
        "id": 147,
        "neetcode150": true,
        "blind75": true,
        "problem": "Counting Bits",
        "pattern": "Bit Manipulation",
        "link": "counting-bits/",
        "video": "RyBM56RIWrM",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0338-counting-bits",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Count the number of 1 bits for each number up to n."
      },
      {
        "id": 148,
        "neetcode150": true,
        "blind75": true,
        "problem": "Reverse Bits",
        "pattern": "Bit Manipulation",
        "link": "reverse-bits/",
        "video": "UcoN6UjAI64",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0190-reverse-bits",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Reverse the bits of an integer."
      },
      {
        "id": 149,
        "neetcode150": true,
        "blind75": true,
        "problem": "Missing Number",
        "pattern": "Bit Manipulation",
        "link": "missing-number/",
        "video": "WnPLSRLSANE",
        "difficulty": "Easy",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0268-missing-number",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Find the missing number in an array using XOR."
      },
      {
        "id": 150,
        "neetcode150": true,
        "blind75": true,
        "problem": "Sum of Two Integers",
        "pattern": "Bit Manipulation",
        "link": "sum-of-two-integers/",
        "video": "gVUrDV4tZfY",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0371-sum-of-two-integers",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "rust": true,
        "description": "Calculate the sum of two integers without using '+' or '-'."
      },
      {
        "id": 151,
        "neetcode150": true,
        "problem": "Reverse Integer",
        "pattern": "Bit Manipulation",
        "link": "reverse-integer/",
        "video": "HAgLH58IgJQ",
        "difficulty": "Medium",
        "python": true,
        "java": true,
        "cpp": true,
        "javascript": true,
        "code": "0007-reverse-integer",
        "c": true,
        "csharp": true,
        "typescript": true,
        "go": true,
        "ruby": true,
        "swift": true,
        "kotlin": true,
        "scala": true,
        "rust": true,
        "description": "Reverse the digits of an integer."
      }
    ]
  }
]
